apiVersion: v1
kind: ServiceAccount
metadata:
  name: kafdrop
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: kafdrop-scc-anyuid
rules:
- apiGroups:
  - security.openshift.io
  resourceNames:
  - anyuid
  resources:
  - securitycontextconstraints
  verbs:
  - use
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: kafdrop-sa-to-scc-anyuid
subjects:
  - kind: ServiceAccount
    name: kafdrop
roleRef:
  kind: Role
  name: kafdrop-scc-anyuid
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: kafdrop
  name: kafdrop
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafdrop
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: kafdrop
    spec:
      serviceAccountName: kafdrop
      containers:
      - image: docker.io/obsidiandynamics/kafdrop
        name: kafdrop
        ports:
        - containerPort: 9000
        env:
        - name: KAFKA_BROKERCONNECT
          value: demo-kafka-bootstrap:9093
        - name: SERVER_SERVLET_CONTEXTPATH
          value: /
        resources: {}
      securityContext:
        runAsUser: 0 # need to run as root because we are generating the trust store
status: {}
---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: kafdrop
  name: kafdrop
spec:
  ports:
  - port: 9000
    protocol: TCP
    targetPort: 9000
  selector:
    app: kafdrop
status:
  loadBalancer: {}
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  labels:
    app: kafdrop
  name: kafdrop
spec:
  tls:
    termination: edge
    insecureEdgeTerminationPolicy: Allow
  port:
    targetPort: 9000
  to:
    kind: Service
    name: kafdrop
    weight: 100
  wildcardPolicy: None
status: {}